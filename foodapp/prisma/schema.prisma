// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([ provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String? // Only for credentials authentication
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String   @id @default(uuid())
  title       String   @unique
  description String
  slug        String   @unique
  img         String
  createdAt   DateTime @default(now())

  products Product[]
}

model Product {
  id          String   @id @default(uuid())
  title       String   @unique
  description String
  price       Float
  img         String?
  bestSeller  Boolean  @default(false)
  options     String[]
  createdAt   DateTime @default(now())

  catSlug  String
  category Category @relation(fields: [catSlug], references: [slug])
  Order    Order?   @relation(fields: [orderId], references: [id])
  orderId  String?
}

enum orderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

model Order {
  id        String      @id @default(uuid())
  price     Decimal     @db.Decimal(10, 2)
  intent_id String      @unique // stripe id is here
  total     Float
  status    orderStatus @default(PENDING)
  createdAt DateTime    @default(now())

  products Product[]
}
